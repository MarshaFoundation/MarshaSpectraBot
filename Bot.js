const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const { Pool } = require('pg');
const dotenv = require('dotenv');

dotenv.config();

// Variables de entorno
const token = process.env.TELEGRAM_API_KEY;
const openaiApiKey = process.env.OPENAI_API_KEY;
const assistantName = 'SilvIA+';
const assistantDescription = 'el primer asistente LGTBI+ en el mundo =) Desarrollado por Marsha+ Foundation. www.marshafoundation.org, info@marshafoundation.org.';
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID;
const DATABASE_URL = process.env.DATABASE_URL;

// ConfiguraciÃ³n de conexiÃ³n a PostgreSQL
const pool = new Pool({
  connectionString: DATABASE_URL,
  ssl: {
    rejectUnauthorized: false // Ajusta segÃºn tu entorno de base de datos
  }
});

// Crear instancia del bot
const bot = new TelegramBot(token, { polling: true });

console.log('Bot iniciado correctamente');

// Almacenamiento temporal para mensajes por chat
const chatMessageHistory = new Map();

// Mapa para cachear respuestas de OpenAI
const cachedResponses = new Map();

// FunciÃ³n para obtener el idioma del usuario desde la base de datos
async function getUserLocale(chatId) {
  try {
    const client = await pool.connect();
    const query = 'SELECT locale FROM users WHERE chat_id = $1';
    const result = await client.query(query, [chatId]);
    client.release();

    if (result.rows.length > 0) {
      return result.rows[0].locale;
    } else {
      console.log(`No se encontrÃ³ el usuario con chat_id ${chatId} en la base de datos.`);
      return 'es'; // Idioma predeterminado si no se encuentra el usuario
    }
  } catch (error) {
    console.error('Error al obtener el idioma del usuario:', error);
    return 'es'; // Valor por defecto en caso de error
  }
}

// FunciÃ³n para obtener respuesta de OpenAI
async function getChatGPTResponse(messages) {
  const messagesKey = JSON.stringify(messages);
  if (cachedResponses.has(messagesKey)) {
    return cachedResponses.get(messagesKey);
  }

  let { temperature, maxTokens, topP } = { temperature: 0.7, maxTokens: 150, topP: 0.8 };

  const lastUserMessage = messages.filter(msg => msg.role === 'user').pop();
  let userText = ''; // Variable para almacenar el texto del usuario

  if (lastUserMessage) {
    userText = lastUserMessage.content.toLowerCase(); // Asignar el contenido del Ãºltimo mensaje del usuario
    // Ajustar los parÃ¡metros basados en el texto del usuario
    if (userText.includes('ayuda')) {
      temperature = 0.5;
      maxTokens = 150;
      topP = 0.8;
    } else if (userText.includes('gracias') || userText.includes('agradecido')) {
      temperature = 0.3;
      maxTokens = 100;
      topP = 0.7;
    } else if (userText.includes('informaciÃ³n')) {
      temperature = 0.6;
      maxTokens = 180;
      topP = 0.85;
    } else if (userText.includes('adiÃ³s') || userText.includes('hasta luego')) {
      temperature = 0.4;
      maxTokens = 120;
      topP = 0.75;
    } else if (userText.includes('broma') || userText.includes('chiste')) {
      temperature = 0.7;
      maxTokens = 200;
      topP = 0.9;
    } else if (userText.includes('cuÃ©ntame mÃ¡s') || userText.includes('explÃ­came')) {
      temperature = 0.6;
      maxTokens = 180;
      topP = 0.85;
    } else if (userText.includes('tienes tiempo')) {
      temperature = 0.4;
      maxTokens = 150;
      topP = 0.8;
    } else if (userText.includes('necesito ayuda urgente')) {
      temperature = 0.8;
      maxTokens = 250;
      topP = 0.95;
    } else if (userText.includes('eres un robot') || userText.includes('eres humano')) {
      temperature = 0.5;
      maxTokens = 160;
      topP = 0.85;
    } else if (userText.includes('quÃ© opinas de')) {
      temperature = 0.6;
      maxTokens = 180;
      topP = 0.85;
    } else if (userText.includes('cuÃ¡l es tu nombre')) {
      temperature = 0.3;
      maxTokens = 100;
      topP = 0.7;
    } else if (userText.includes('recursos de apoyo lgtbi') || userText.includes('derechos lgtbi') ||
               userText.includes('definiciones lgtbi') || userText.includes('eventos lgtbi') ||
               userText.includes('pronombres y gÃ©nero') || userText.includes('discriminaciÃ³n lgtbi') ||
               userText.includes('apoyo familiar lgtbi') || userText.includes('historia lgtbi') ||
               userText.includes('salud mental lgtbi') || userText.includes('temas lgtbi') ||
               userText.includes('opiniÃ³n lgtbi')) {
      temperature = 0.6;
      maxTokens = 180;
      topP = 0.85;
    }
  }

  try {
    const response = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-3.5-turbo',
      messages: messages,
      temperature: temperature,
      max_tokens: maxTokens,
      top_p: topP
    }, {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${openaiApiKey}`
      }
    });

    let gptResponse = response.data.choices[0].message.content.trim();
    
    // AÃ±adir respuestas empÃ¡ticas y variedad de estilos aquÃ­
    if (userText.includes('ayuda')) {
      gptResponse = `Estoy aquÃ­ para ayudarte en lo que necesites. ${gptResponse}`;
    } else if (userText.includes('gracias') || userText.includes('agradecido')) {
      gptResponse = `De nada, es un placer ayudarte. ${gptResponse}`;
    } else if (userText.includes('adiÃ³s') || userText.includes('hasta luego')) {
      gptResponse = `Â¡Hasta luego! Siempre estarÃ© aquÃ­ cuando me necesites. ${gptResponse}`;
    } else if (userText.includes('broma') || userText.includes('chiste')) {
      gptResponse = `Â¡Claro! AquÃ­ va uno: Â¿Por quÃ© los pÃ¡jaros no usan Facebook? Porque ya tienen Twitter. ğŸ˜„ ${gptResponse}`;
    } else if (userText.includes('cuÃ©ntame mÃ¡s') || userText.includes('explÃ­came')) {
      gptResponse = `Â¡Por supuesto! Estoy aquÃ­ para explicarte con detalle. ${gptResponse}`;
    } else if (userText.includes('eres un robot') || userText.includes('eres humano')) {
      gptResponse = `Soy un asistente virtual creado para ayudarte, pero estoy aquÃ­ para conversar contigo como lo harÃ­a un amigo. ${gptResponse}`;
    } else if (userText.includes('quÃ© opinas de')) {
      gptResponse = `Mi opiniÃ³n es que cada persona tiene su propia perspectiva. Me encantarÃ­a escuchar tu opiniÃ³n sobre este tema. ${gptResponse}`;
    } else if (userText.includes('cuÃ¡l es tu nombre')) {
      gptResponse = `Mi nombre es ${assistantName}. Â¿CÃ³mo puedo asistirte hoy? ${gptResponse}`;
    } else if (userText.includes('recursos de apoyo lgtbi') || userText.includes('derechos lgtbi') ||
               userText.includes('definiciones lgtbi') || userText.includes('eventos lgtbi') ||
               userText.includes('pronombres y gÃ©nero') || userText.includes('discriminaciÃ³n lgtbi') ||
               userText.includes('apoyo familiar lgtbi') || userText.includes('historia lgtbi') ||
               userText.includes('salud mental lgtbi') || userText.includes('temas lgtbi') ||
               userText.includes('opiniÃ³n lgtbi')) {
      gptResponse = `Entiendo que estos temas son importantes. Estoy aquÃ­ para proporcionarte informaciÃ³n y apoyo sobre temas LGBTQ+. ${gptResponse}`;
    }

    cachedResponses.set(messagesKey, gptResponse);

    return gptResponse;
  } catch (error) {
    console.error('Error al llamar a OpenAI:', error);
    return 'Lo siento, actualmente no puedo procesar tu solicitud.';
  }
}

// FunciÃ³n para enviar mensaje directo a un usuario
async function enviarMensajeDirecto(chatId, mensaje) {
  try {
    const response = await bot.sendMessage(chatId, mensaje);
    console.log(`Mensaje enviado a ${chatId}: ${mensaje}`);
    return response;
  } catch (error) {
    console.error(`Error al enviar mensaje a ${chatId}:`, error);
    throw error; // Propagar el error para manejarlo en el lugar donde se llama a esta funciÃ³n
  }
}

// FunciÃ³n genÃ©rica para comparar mensajes
function matchPhrases(message, phrases) {
  const normalizedMessage = message.trim().toLowerCase();
  return phrases.includes(normalizedMessage);
}

// Definiciones de respuestas para saludos y preguntas sobre el nombre
const responses = {
  greeting: `Â¡Hola! Soy ${assistantName}, tu asistente. Â¿CÃ³mo puedo ayudarte hoy?`,
  name: `Mi nombre es ${assistantName}. ${assistantDescription}`,
};

// Funciones para detectar saludos y preguntas por el nombre del asistente
const greetings = [
  // EspaÃ±ol
  'hola', 'hi', 'quÃ© tal', 'buenas', 'hey', 'buen dÃ­a',
  'Â¿cÃ³mo estÃ¡s?', 'saludos', 'Â¿quÃ© hay?', 'buenas tardes', 'buenas noches',
  'Â¿cÃ³mo va?', 'Â¿quÃ© pasa?', 'Â¿quÃ© hubo?', 'Â¡buenos dÃ­as!',
  'Â¿cÃ³mo te va?', 'Â¿quÃ© onda?', 'Â¿estÃ¡s ahÃ­?',
  'buen dÃ­a', 'buenas noches', 'buenas tardes', 'Â¿cÃ³mo estÃ¡s hoy?',
  'hola, Â¿cÃ³mo estÃ¡s?', 'Â¿quÃ© tal?', 'hola, Â¿quÃ© hay?', 'hey, Â¿cÃ³mo estÃ¡s?',
  'saludos, Â¿quÃ© tal?', 'buenos dÃ­as, Â¿cÃ³mo va?', 'buenas noches, Â¿quÃ© hay?',
  'buenas tardes, Â¿cÃ³mo estÃ¡s?', 'Â¿estÃ¡s ahÃ­?', 'hey, Â¿quÃ© onda?',
  'hola, Â¿estÃ¡s ahÃ­?', 'saludos, Â¿quÃ© pasa?', 'buenas, Â¿quÃ© hubo?',
  'buenos dÃ­as, Â¿cÃ³mo te va?', 'buenas noches, Â¿cÃ³mo onda?',
  'buenas tardes, Â¿estÃ¡s ahÃ­?', 'Â¿cÃ³mo estÃ¡s hoy?', 'hola, Â¿quÃ© tal?',
  'buen dÃ­a, Â¿cÃ³mo estÃ¡s?', 'buenas noches, Â¿quÃ© tal?',
  'buenas tardes, Â¿cÃ³mo te va?', 'saludos, Â¿cÃ³mo onda?',
  'hey, Â¿quÃ© tal?', 'hola, Â¿cÃ³mo va?', 'Â¿quÃ© hay?', 'buenos dÃ­as',
  'buenas noches', 'buenas tardes', 'Â¿cÃ³mo estÃ¡s hoy?',
  'hola, Â¿cÃ³mo estÃ¡s?', 'Â¿quÃ© tal?', 'hola, Â¿quÃ© hay?', 'hey, Â¿cÃ³mo estÃ¡s?',
  'saludos, Â¿quÃ© tal?', 'buenos dÃ­as, Â¿cÃ³mo va?', 'buenas noches, Â¿quÃ© hay?',
  'buenas tardes, Â¿cÃ³mo estÃ¡s?', 'Â¿estÃ¡s ahÃ­?', 'hey, Â¿quÃ© onda?',
  'hola, Â¿estÃ¡s ahÃ­?', 'saludos, Â¿quÃ© pasa?', 'buenas, Â¿quÃ© hubo?',
  'buenos dÃ­as, Â¿cÃ³mo te va?', 'buenas noches, Â¿cÃ³mo onda?',
  'buenas tardes, Â¿estÃ¡s ahÃ­?', 'Â¿cÃ³mo estÃ¡s hoy?', 'hola, Â¿quÃ© tal?',
  'buen dÃ­a, Â¿cÃ³mo estÃ¡s?', 'buenas noches, Â¿quÃ© tal?',
  'buenas tardes, Â¿cÃ³mo te va?', 'saludos, Â¿cÃ³mo onda?',
  'hey, Â¿quÃ© tal?', 'hola, Â¿cÃ³mo va?', 'Â¿quÃ© hay?',

  // InglÃ©s
  'good morning', 'good afternoon', 'good evening', 'hey there', 'howdy',
  'whatâ€™s up?', 'how are you?', 'greetings', 'howâ€™s it going?', 'whatâ€™s new?',
  'howâ€™s everything?', 'long time no see', 'howâ€™s life?', 'hey man', 'hi there',
  'howdy-do', 'whatâ€™s happening?', 'how goes it?', 'hey buddy', 'hello there',
  'good day', 'whatâ€™s cracking?', 'hey dude', 'whatâ€™s the good word?', 'howâ€™s your day?',
  'nice to see you', 'hiya', 'whatâ€™s happening?', 'hey friend', 'sup?',
  'howâ€™s your day been?', 'yo', 'whatâ€™s popping?', 'howâ€™s your day going?',
  'good morning, how are you?', 'hey, howâ€™s it going?', 'whatâ€™s up, buddy?',
  'long time no see, how are things?', 'hello, howâ€™s everything?', 'good afternoon, whatâ€™s new?',
  'hey there, howâ€™s life?', 'howdy, whatâ€™s happening?', 'hi there, how goes it?',
  'good evening, how are you?', 'howâ€™s your day today?', 'whatâ€™s new, how are you?',
  'hello there, whatâ€™s up?', 'whatâ€™s cracking, how are you?', 'hey dude, howâ€™s your day?',
  'hiya, howâ€™s it going?', 'sup, how are things?', 'good day, how are you doing?',
  'whatâ€™s the good word, how are you?', 'howdy-do, how are you today?',
  'nice to see you, how have you been?', 'yo, howâ€™s everything going?',
  'whatâ€™s popping, how are things?', 'hey friend, howâ€™s your day been?',
  'howâ€™s your day been so far?', 'good morning, howâ€™s your day?',
  'hello, howâ€™s it going today?', 'hey, howâ€™s your day been?', 'whatâ€™s new, how are you?',
  'howâ€™s everything going today?', 'hey buddy, howâ€™s your day?',
  'long time no see, howâ€™s everything going?', 'howâ€™s life been treating you?',
  'hi there, howâ€™s your day been?', 'hey there, how are you doing?',
  'howdy, howâ€™s everything been?', 'good evening, howâ€™s it going?',
  'howâ€™s your day going so far?', 'whatâ€™s happening, how are you?',
  'hey dude, howâ€™s everything?', 'howâ€™s your day treating you?',
  'hiya, howâ€™s it going so far?', 'sup, howâ€™s your day been?',
  'whatâ€™s going on, how are you?', 'howâ€™s your day treating you today?',
  'hey friend, how have you been?', 'howâ€™s everything going so far?',
  'howâ€™s your day treating you so far?', 'hiya, howâ€™s your day going?',
  'yo, howâ€™s your day treating you?', 'whatâ€™s up, how have you been?',
  'whatâ€™s new, howâ€™s everything been?', 'whatâ€™s happening, how are things?',
  'hey there, howâ€™s everything been?', 'whatâ€™s cracking, howâ€™s your day?',
  'howâ€™s everything been so far?', 'whatâ€™s up, howâ€™s everything going?',
  'hey dude, how have you been?', 'whatâ€™s the good word, howâ€™s everything?',
  'howdy-do, howâ€™s everything going?', 'whatâ€™s going on, how have you been?',
  'howâ€™s your day been going?', 'hey friend, howâ€™s everything?',
  'howâ€™s your day been treating you so far?', 'howâ€™s everything going today?',
  'hi there, howâ€™s your day going?', 'hey there, howâ€™s everything going?',
  'howâ€™s everything been treating you?', 'howâ€™s your day been today?',
  'howâ€™s your day been going so far?'
];

const askingNames = [
  // EspaÃ±ol
  'Â¿cuÃ¡l es tu nombre?', 'como te llamas?', 'cÃ³mo te llamas?', 'nombre?', 'dime tu nombre',
  'cuÃ¡l es tu nombre', 'me puedes decir tu nombre', 'quiero saber tu nombre', 'cÃ³mo te llaman', 
  'cual es tu nombre completo', 'cÃ³mo te nombras', 'tu nombre', 'sabes tu nombre', 'cual es su nombre',
  'podrÃ­as decirme tu nombre', 'dime el nombre que usas', 'cÃ³mo deberÃ­a llamarte', 'tu nombre por favor',
  'puedo saber tu nombre', 'cÃ³mo te conocen', 'quiÃ©n eres', 'cÃ³mo te identificas', 'sabes cÃ³mo te llaman',
  'cÃ³mo te referirÃ­as a ti mismo', 'dame tu nombre', 'quÃ© nombre tienes', 'cÃ³mo te identifican', 'tu nombre actual',
  'cÃ³mo te apodan', 'sabes tu propio nombre', 'quiero tu nombre', 'dime cÃ³mo te llaman', 'sabes tu nombre actual',
  'tu nombre es', 'dime cÃ³mo te nombran', 'me gustarÃ­a saber tu nombre', 'puedes darme tu nombre', 'dime tu identificaciÃ³n',
  'dime el nombre con el que te conocen', 'dime el nombre que usas', 'sabes cÃ³mo te dicen', 'cÃ³mo deberÃ­a llamarte',
  'dime el nombre que tienes', 'cÃ³mo deberÃ­a referirme a ti', 'cÃ³mo te identificas tÃº mismo',

  // InglÃ©s
  'what is your name?', 'what\'s your name?', 'your name?', 'tell me your name', 'could you tell me your name',
  'can you tell me your name', 'may I know your name', 'what do they call you', 'how should I address you',
  'what should I call you', 'could you share your name', 'tell me the name you use', 'what name do you use',
  'may I have your name', 'your full name', 'how do you identify yourself', 'do you know your name',
  'what would you like me to call you', 'what should I know you as', 'may I know the name you use',
  'can I know your name', 'how are you known', 'what are you called', 'how do you name yourself',
  'what should I call you', 'how do you refer to yourself', 'what\'s your current name', 'what\'s your name',
  'could you give me your name', 'what\'s your identification', 'tell me the name people use for you',
  'what name do you go by', 'do you know what they call you', 'may I know your current name',
  'what is your name right now', 'may I ask your name', 'tell me your ID', 'tell me your current name',
  'what should I refer to you as', 'how do you identify', 'how do you identify yourself'
];

module.exports = {
  greetings,
  askingNames
};

// Funciones para detectar preguntas sobre SilvIA+
const silviaQuestions = [
  // EspaÃ±ol
  'quÃ© es SilvIA+', 'quiÃ©n es SilvIA+', 'cuÃ¡l es la misiÃ³n de SilvIA+',
  'cuÃ¡l es el propÃ³sito de SilvIA+', 'quÃ© hace SilvIA+', 'informaciÃ³n sobre SilvIA+',
  'quiÃ©n creÃ³ SilvIA+', 'quiÃ©nes son los fundadores de SilvIA+', 'quiÃ©n estÃ¡ detrÃ¡s de SilvIA+',

  // InglÃ©s
  'what is SilvIA+', 'who is SilvIA+', 'what is the mission of SilvIA+',
  'what is the purpose of SilvIA+', 'what does SilvIA+ do', 'information about SilvIA+',
  'who created SilvIA+', 'who are the founders of SilvIA+', 'who is behind SilvIA+'
];

// Respuesta sobre SilvIA+
const silviaResponse = `
SilvIA+ es una avanzada inteligencia artificial diseÃ±ada para proporcionar respuestas y asistencia basadas en lenguaje natural. 
EstÃ¡ construida sobre la arquitectura de OpenAI GPT y puede responder una amplia gama de preguntas sobre diversos temas.
`;

// Funciones para detectar preguntas sobre Marsha+
const marshaQuestions = [
  // EspaÃ±ol
  'quÃ© es Marsha+', 'quiÃ©n es Marsha+', 'cuÃ¡l es la misiÃ³n de Marsha+',
  'cuÃ¡l es el propÃ³sito de Marsha+', 'quÃ© hace Marsha+', 'informaciÃ³n sobre Marsha+',
  'quiÃ©n creÃ³ Marsha+', 'quiÃ©nes son los fundadores de Marsha+', 'quiÃ©n estÃ¡ detrÃ¡s de Marsha+',
  'quÃ© es el token Marsha+', 'cÃ³mo funciona Marsha+', 'informaciÃ³n sobre el token Marsha+',
  'dÃ³nde puedo obtener informaciÃ³n sobre Marsha+', 'cÃ³mo puedo participar en Marsha+',
  'cÃ³mo puedo unirme a Marsha+', 'cÃ³mo puedo apoyar a Marsha+', 'dÃ³nde puedo comprar el token Marsha+',
  'cÃ³mo obtengo Marsha+', 'dÃ³nde puedo invertir en Marsha+', 'cÃ³mo puedo contribuir a Marsha+',
  'cÃ³mo puedo ser parte de Marsha+', 'dÃ³nde puedo aprender mÃ¡s sobre Marsha+',
  'quÃ© es MSA', 'quÃ© significa MSA', 'cuÃ¡l es la relaciÃ³n entre Marsha+ y MSA',
  'dÃ³nde puedo encontrar informaciÃ³n sobre MSA', 'quÃ© es la fundaciÃ³n Marsha+', 'quiÃ©n fundÃ³ Marsha+',
  'quiÃ©n es el creador de Marsha+', 'quiÃ©n desarrollÃ³ Marsha+', 'quiÃ©nes estÃ¡n detrÃ¡s de Marsha+',
  'informaciÃ³n sobre la fundaciÃ³n Marsha+', 'quiÃ©nes son los creadores de Marsha+',

  // InglÃ©s
  'what is Marsha+', 'who is Marsha+', 'what is the mission of Marsha+',
  'what is the purpose of Marsha+', 'what does Marsha+ do', 'information about Marsha+',
  'who created Marsha+', 'who are the founders of Marsha+', 'who is behind Marsha+',
  'what is the Marsha+ token', 'how does Marsha+ work', 'information about the Marsha+ token',
  'where can I find information about Marsha+', 'how can I get involved in Marsha+',
  'how can I join Marsha+', 'how can I support Marsha+', 'where can I buy the Marsha+ token',
  'how do I get Marsha+', 'where can I invest in Marsha+', 'how can I contribute to Marsha+',
  'how can I be part of Marsha+', 'where can I learn more about Marsha+',
  'what is MSA', 'what does MSA mean', 'what is the relationship between Marsha+ and MSA',
  'where can I find information about MSA', 'what is the Marsha+ foundation', 'who founded Marsha+',
  'who is the creator of Marsha+', 'who developed Marsha+', 'who is behind Marsha+',
  'information about the Marsha+ foundation', 'who are the creators of Marsha+'
];

// Respuesta sobre Marsha+
const marshaResponse = `
Introducing Marsha+: A revolutionary initiative designed to empower and support the LGBTQ+ community through blockchain technology. Our commitment is grounded in the belief that equality and human rights are fundamental, and Marsha+ stands as a beacon of positive change.

This innovative token, built on Ethereum and deployed on the Binance Smart Chain, is more than just a digital asset; it's a catalyst for meaningful action. Marsha+ will facilitate secure and transparent transactions, fundraising initiatives, and various applications within the community. Our mission is clear: to strengthen the LGBTQ+ community by providing the necessary tools to face contemporary challenges.

With a total supply of 8 billion tokens and an annual burn rate of 3%, Marsha+ represents a symbol of sustained commitment to equality, diversity, and a brighter future. Join Marsha+ and be part of the change!

For more information, visit [marshaplus.org](http://marshaplus.org).
`;

// FunciÃ³n para manejar mensajes sobre SilvIA+
async function handleSilviaQuestions(msg) {
  const chatId = msg.chat.id;
  const messageText = msg.text.toLowerCase();

  if (silviaQuestions.some(question => messageText.includes(question))) {
    await bot.sendMessage(chatId, silviaResponse);
  }
}

// FunciÃ³n para manejar mensajes sobre Marsha+
async function handleMarshaQuestions(msg) {
  const chatId = msg.chat.id;
  const messageText = msg.text.toLowerCase();

  if (marshaQuestions.some(question => messageText.includes(question))) {
    await bot.sendMessage(chatId, marshaResponse);
  }
}

// FunciÃ³n principal para manejar todos los mensajes
async function handleMessage(msg) {
  const chatId = msg.chat.id;
  const messageText = msg.text;

  if (!messageText) return;

  try {
    const userLocale = await getUserLocale(chatId);
    const messageHistory = chatMessageHistory.get(chatId) || [];
    messageHistory.push({ role: 'user', content: messageText });

    // LÃ³gica de personalizaciÃ³n basada en historial aquÃ­

    if (matchPhrases(messageText, greetings)) {
      bot.sendMessage(chatId, responses.greeting);
    } else if (matchPhrases(messageText, askingNames)) {
      bot.sendMessage(chatId, responses.name);
    } else {
      const assistantIntro = { role: 'system', content: `Eres un asistente llamado ${assistantName}. ${assistantDescription}` };
      const messagesWithIntro = [assistantIntro, ...messageHistory];

      const gptResponse = await getChatGPTResponse(messagesWithIntro);
      bot.sendMessage(chatId, gptResponse);

      messageHistory.push({ role: 'assistant', content: gptResponse });
      chatMessageHistory.set(chatId, messageHistory);
    }

    // Manejar preguntas especÃ­ficas sobre SilvIA+ y Marsha+
    await handleSilviaQuestions(msg);
    await handleMarshaQuestions(msg);

  } catch (error) {
    console.error('Error handling message:', error);
    bot.sendMessage(chatId, 'Lo siento, ocurriÃ³ un error al procesar tu mensaje.');
  }
}

// Conectar manejo de mensajes al bot
bot.on('message', handleMessage);

// Manejar comandos
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const welcomeMessage = `Â¡Hola! Soy ${assistantName}, tu asistente. Â¿CÃ³mo puedo ayudarte hoy?`;
  bot.sendMessage(chatId, welcomeMessage);
});

bot.on('polling_error', (error) => {
  console.error('Error de polling:', error);
});

process.on('uncaughtException', (err) => {
  console.error('Error no capturado:', err);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('Error no manejado:', reason, 'promise:', promise);
});

// InicializaciÃ³n de la base de datos
(async () => {
  const client = await pool.connect();
  try {
    await client.query(`
      CREATE TABLE IF NOT EXISTS users (
        chat_id BIGINT PRIMARY KEY,
        locale TEXT NOT NULL DEFAULT 'es'
      )
    `);
    console.log('Tabla de usuarios creada correctamente');
  } catch (error) {
    console.error('Error al crear la tabla de usuarios:', error);
  } finally {
    client.release();
  }
})();






































































































































