const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const { Pool } = require('pg');
const dotenv = require('dotenv');

dotenv.config();

// ConfiguraciÃ³n de variables de entorno
const token = process.env.TELEGRAM_API_KEY;
const openaiApiKey = process.env.OPENAI_API_KEY;
const assistantName = 'SilvIA+';
const assistantDescription = 'Mi nombre es SilvIA, el primer asistente LGTBI+ en el mundo. Desarrollado por Marsha+ Foundation. www.marshafoundation.org, info@marshafoundation.org.';
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID;
const DATABASE_URL = process.env.DATABASE_URL;

// ConfiguraciÃ³n de la conexiÃ³n a PostgreSQL
const pool = new Pool({
  connectionString: DATABASE_URL,
  ssl: {
    rejectUnauthorized: false // Ajusta esta configuraciÃ³n segÃºn tu entorno de base de datos
  }
});

// Crear instancia del bot
const bot = new TelegramBot(token, { polling: true });

console.log('Bot iniciado correctamente');

// Almacenamiento temporal para mensajes por chat
const chatMessageHistory = new Map();

// FunciÃ³n para hacer la llamada a OpenAI y cachear respuestas
const cachedResponses = new Map();

async function getChatGPTResponse(messages) {
  const messagesKey = JSON.stringify(messages);
  if (cachedResponses.has(messagesKey)) {
    return cachedResponses.get(messagesKey);
  }

  try {
    const response = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-3.5-turbo',
      messages: messages,
      temperature: 0.7,
    }, {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${openaiApiKey}`
      }
    });

    const gptResponse = response.data.choices[0].message.content.trim();
    cachedResponses.set(messagesKey, gptResponse);

    return gptResponse;
  } catch (error) {
    console.error('Error al llamar a OpenAI:', error);
    return 'Lo siento, actualmente no puedo procesar tu solicitud.';
  }
}

// FunciÃ³n para obtener el idioma del usuario desde la base de datos
async function getUserLocale(chatId) {
  try {
    const client = await pool.connect();
    const res = await client.query('SELECT locale FROM users WHERE chat_id = $1', [chatId]);
    client.release();
    return res.rows.length > 0 ? res.rows[0].locale : 'es';
  } catch (error) {
    console.error('Error al obtener el idioma del usuario:', error);
    return 'es';
  }
}

// FunciÃ³n para actualizar/guardar el idioma del usuario en la base de datos
async function setUserLocale(chatId, locale) {
  try {
    const client = await pool.connect();
    await client.query('INSERT INTO users (chat_id, locale) VALUES ($1, $2) ON CONFLICT (chat_id) DO UPDATE SET locale = $2', [chatId, locale]);
    client.release();
  } catch (error) {
    console.error('Error al configurar el idioma del usuario:', error);
  }
}

// FunciÃ³n para enviar un mensaje directo a un usuario dado su chat_id
async function enviarMensajeDirecto(chatId, mensaje) {
  try {
    await bot.sendMessage(chatId, mensaje);
    console.log(`Mensaje enviado a ${chatId}: ${mensaje}`);
  } catch (error) {
    console.error(`Error al enviar mensaje a ${chatId}:`, error);
  }
}

// FunciÃ³n para determinar si el mensaje es un saludo
function isGreeting(message) {
  const greetings = [
    'hola', 'hola!', 'hi', 'hello', 'quÃ© tal', 'buenas', 'hey', 'buen dÃ­a',
    'Â¿cÃ³mo estÃ¡s?', 'saludos', 'Â¿quÃ© hay?', 'buenas tardes', 'buenas noches',
    'Â¿cÃ³mo va?', 'Â¿quÃ© pasa?', 'Â¿quÃ© hubo?', 'Â¡buenos dÃ­as!', 'Â¿cÃ³mo te va?',
    'Â¿quÃ© onda?', 'buenas tardes', 'Â¿estÃ¡s ahÃ­?', 'buenas noches', 'Â¿quÃ© tal?',
    'Â¡hola!', 'buen dÃ­a!', 'buenas!', 'Â¡hey!', 'hey!', 'hi!', 'hello!', 'Â¡saludos!',
    'saludos!', 'Â¿quÃ© hay?','buenas tardes!','buenas noches!', 'Â¿cÃ³mo va?','Â¿quÃ© pasa?',
    'Â¿quÃ© hubo?','Â¡buenos dÃ­as!','Â¿cÃ³mo te va?','Â¿quÃ© onda?','buenas tardes',
    'Â¿estÃ¡s ahÃ­?','buenas noches', 'Â¿quÃ© tal?','Â¡hola!','buen dÃ­a!','buenas!','Â¡hey!',
    'hey!','hi!','hello!','Â¡saludos!','saludos!','Â¿quÃ© hay?','buenas tardes!','buenas noches!',
    'Â¿cÃ³mo va?','Â¿quÃ© pasa?','Â¿quÃ© hubo?','Â¡buenos dÃ­as!','Â¿cÃ³mo te va?','Â¿quÃ© onda?',
    'buenas tardes','Â¿estÃ¡s ahÃ­?','buenas noches','Â¿quÃ© tal?','Â¡hola!','buen dÃ­a!','buenas!',
    'Â¡hey!','hey!','hi!','hello!','Â¡saludos!','saludos!','Â¿quÃ© hay?','buenas tardes!','buenas noches!',
    'Â¿cÃ³mo va?','Â¿quÃ© pasa?','Â¿quÃ© hubo?','Â¡buenos dÃ­as!','Â¿cÃ³mo te va?','Â¿quÃ© onda?','buenas tardes',
    'Â¿estÃ¡s ahÃ­?','buenas noches','Â¿quÃ© tal?','Â¡hola!','buen dÃ­a!','buenas!','Â¡hey!','hey!','hi!',
    'hello!','Â¡saludos!','saludos!','Â¿quÃ© hay?','buenas tardes!','buenas noches!','Â¿cÃ³mo va?',
    'Â¿quÃ© pasa?','Â¿quÃ© hubo?','Â¡buenos dÃ­as!','Â¿cÃ³mo te va?','Â¿quÃ© onda?','buenas tardes','Â¿estÃ¡s ahÃ­?',
    'buenas noches','Â¿quÃ© tal?'
  ];

  const normalizedMessage = message.trim().toLowerCase();
  return greetings.includes(normalizedMessage);
}


// FunciÃ³n para determinar si el mensaje es una pregunta por el nombre del asistente
function isAskingName(message) {
  const askingNames = ['Â¿cuÃ¡l es tu nombre?', 'cuÃ¡l es tu nombre?', 'como te llamas?', 'cÃ³mo te llamas?', 'Â¿como te llamas?', 'nombre?', 'dime tu nombre'];
  const normalizedMessage = message.trim().toLowerCase();
  return askingNames.includes(normalizedMessage);
}

// Manejar el reporte de avistamiento del niÃ±o perdido
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const messageText = msg.text.toLowerCase();

    if (messageText.includes('loan')) {
        // Solicitar ubicaciÃ³n al usuario de manera contextual
        const request = "Â¿PodrÃ­as compartir tu ubicaciÃ³n actual para ayudarnos en la bÃºsqueda del niÃ±o perdido?";
        bot.sendMessage(chatId, request, {
            reply_markup: {
                keyboard: [
                    [{
                        text: "Compartir ubicaciÃ³n",
                        request_location: true // Solicitar ubicaciÃ³n
                    }]
                ],
                resize_keyboard: true
            }
        });
    } else {
        // Manejar otros mensajes como se harÃ­a normalmente
        await bot.sendMessage(chatId, 'Â¡Hola! Soy SilvIA, el primer asistente LGTBI+ en el mundo. Desarrollado por Marsha+ Foundation. www.marshafoundation.org, info@marshafoundation.org. Â¿En quÃ© puedo ayudarte?');
    }
});

// FunciÃ³n para manejar el reporte de avistamiento del niÃ±o perdido
async function handleMissingChildReport(msg) {
  const chatId = msg.chat.id;

  try {
    await bot.sendMessage(chatId, 'ðŸš¨ Â¡Posible avistamiento del niÃ±o perdido! ðŸš¨');
    await bot.sendMessage(ADMIN_CHAT_ID, `Mensaje de ${msg.from.first_name} | ${msg.chat.username || msg.chat.id}:\n${msg.text}`);
    await bot.sendMessage(chatId, 'Gracias por tu mensaje. Hemos notificado a las autoridades competentes. Â¿Puedo ayudarte con algo mÃ¡s?');
  } catch (error) {
    console.error(`Error al manejar el reporte de avistamiento del niÃ±o perdido:`, error);
  }
}

// Manejar mensajes de texto y comandos
bot.on('message', async (msg) => {
  try {
    if (!msg || (!msg.text && !msg.voice)) {
      console.error('Mensaje entrante no vÃ¡lido:', msg);
      return;
    }

    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const userMessage = msg.text.trim().toLowerCase();

    // Obtener o inicializar historial de mensajes para este chat
    let messageHistory = chatMessageHistory.get(chatId) || [];
    messageHistory.push({ role: 'user', content: userMessage });
    chatMessageHistory.set(chatId, messageHistory);

    // Saludo detectado
    if (isGreeting(userMessage)) {
      const responseMessage = `Â¡Hola! Soy ${assistantName}, ${assistantDescription}. Â¿En quÃ© puedo ayudarte?`;
      bot.sendMessage(chatId, responseMessage);
    }
    // Pregunta por el nombre del asistente
    else if (isAskingName(userMessage)) {
      const responseMessage = `Mi nombre es ${assistantName}, ${assistantDescription}`;
      bot.sendMessage(chatId, responseMessage);
    }
    // Reporte de avistamiento del niÃ±o perdido
    else if (userMessage.includes('loan')) {
      await handleMissingChildReport(msg);
    }
    // Consulta a OpenAI o Wikipedia
    else {
      const prompt = { role: 'user', content: userMessage };
      const messages = [...messageHistory, prompt];
      const gptResponse = await getChatGPTResponse(messages);
      bot.sendMessage(chatId, gptResponse || 'No entiendo tu solicitud. Â¿PodrÃ­as reformularla?');
    }
  } catch (error) {
    console.error('Error al manejar mensaje de texto:', error);
  }
});

// Manejar el evento de inicio del bot (/start)
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;4
  const opts = {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [{ text: 'ðŸ‡¬ðŸ‡§ English', callback_data: 'en' }],
        [{ text: 'ðŸ‡ªðŸ‡¸ EspaÃ±ol', callback_data: 'es' }],
      ],
    }),
  };
  const locale = await getUserLocale(chatId);
  bot.sendMessage(chatId, 'Â¡Hola! Por favor, elige tu idioma.', opts);
});

// Manejar el cambio de idioma desde los botones de selecciÃ³n
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const locale = callbackQuery.data;
  await setUserLocale(chatId, locale);
  bot.sendMessage(chatId, `Idioma cambiado a ${locale}`);
});

// Solicitar ubicaciÃ³n al usuario
bot.onText(/\/ubicacion/, (msg) => {
  const chatId = msg.chat.id;
  const request = "Por favor, comparte tu ubicaciÃ³n actual para ayudarnos en la bÃºsqueda del niÃ±o perdido.";

  bot.sendMessage(chatId, request, {
    reply_markup: {
      keyboard: [
        [{
          text: "Compartir ubicaciÃ³n",
          request_location: true // Solicitar ubicaciÃ³n
        }]
      ],
      resize_keyboard: true
    }
  });
});

// Manejar la respuesta de ubicaciÃ³n del usuario
bot.on('location', async (msg) => {
  const chatId = msg.chat.id;
  const latitude = msg.location.latitude;
  const longitude = msg.location.longitude;

  // Guardar o utilizar la ubicaciÃ³n recibida para ayudar en la bÃºsqueda del niÃ±o perdido
  console.log(`UbicaciÃ³n recibida de ${chatId}: Latitud ${latitude}, Longitud ${longitude}`);

  // Puedes enviar un agradecimiento o confirmaciÃ³n al usuario
  await bot.sendMessage(chatId, "Â¡Gracias por compartir tu ubicaciÃ³n! Esto nos ayuda mucho en la bÃºsqueda.");
});

// Escuchar errores de polling del bot
bot.on('polling_error', (error) => {
  console.error('Error de polling:', error);
});

// Manejar errores no capturados en el proceso
process.on('uncaughtException', (err) => {
  console.error('Error no capturado:', err);
});

// Manejar rechazos no manejados en promesas
process.on('unhandledRejection', (reason, promise) => {
  console.error('Error no manejado:', reason, 'promise:', promise);
});

// Iniciar el bot
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const opts = {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [{ text: 'ðŸ‡¬ðŸ‡§ English', callback_data: 'en' }],
        [{ text: 'ðŸ‡ªðŸ‡¸ EspaÃ±ol', callback_data: 'es' }],
      ],
    }),
  };
  const locale = await getUserLocale(chatId);
  bot.sendMessage(chatId, 'Â¡Hola! Por favor, elige tu idioma.', opts);
});

// Manejar el cambio de idioma desde los botones de selecciÃ³n
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const locale = callbackQuery.data;
  await setUserLocale(chatId, locale);
  bot.sendMessage(chatId, `Idioma cambiado a ${locale}`);
});

// Solicitar ubicaciÃ³n al usuario
bot.onText(/\/ubicacion/, (msg) => {
  const chatId = msg.chat.id;
  const request = "Por favor, comparte tu ubicaciÃ³n actual para ayudarnos en la bÃºsqueda del niÃ±o perdido.";

  bot.sendMessage(chatId, request, {
    reply_markup: {
      keyboard: [
        [{
          text: "Compartir ubicaciÃ³n",
          request_location: true // Solicitar ubicaciÃ³n
        }]
      ],
      resize_keyboard: true
    }
  });
});

// Manejar la respuesta de ubicaciÃ³n del usuario
bot.on('location', async (msg) => {
  const chatId = msg.chat.id;
  const latitude = msg.location.latitude;
  const longitude = msg.location.longitude;

  // Guardar o utilizar la ubicaciÃ³n recibida para ayudar en la bÃºsqueda del niÃ±o perdido
  console.log(`UbicaciÃ³n recibida de ${chatId}: Latitud ${latitude}, Longitud ${longitude}`);

  // Puedes enviar un agradecimiento o confirmaciÃ³n al usuario
  await bot.sendMessage(chatId, "Â¡Gracias por compartir tu ubicaciÃ³n! Esto nos ayuda mucho en la bÃºsqueda.");
});

// Escuchar errores de polling del bot
bot.on('polling_error', (error) => {
  console.error('Error de polling:', error);
});

// Manejar errores no capturados en el proceso
process.on('uncaughtException', (err) => {
  console.error('Error no capturado:', err);
});

// Manejar rechazos no manejados en promesas
process.on('unhandledRejection', (reason, promise) => {
  console.error('Error no manejado:', reason, 'promise:', promise);
});



